// C
#ifndef _GLIBCXX_NO_ASSERT
#include <cassert>
#endif
#include <cctype>
#include <cerrno>
#include <cfloat>
#include <ciso646>
#include <climits>
#include <clocale>
#include <cmath>
#include <csetjmp>
#include <csignal>
#include <cstdarg>
#include <cstddef>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>

#if __cplusplus >= 201103L
#include <ccomplex>
#include <cfenv>
#include <cinttypes>
#include <cstdalign>
#include <cstdbool>
#include <cstdint>
#include <ctgmath>
#include <cwchar>
#include <cwctype>
#endif

// C++
#include <algorithm>
#include <bitset>
#include <complex>
#include <deque>
#include <exception>
#include <fstream>
#include <functional>
#include <iomanip>
#include <ios>
#include <iosfwd>
#include <iostream>
#include <istream>
#include <iterator>
#include <limits>
#include <list>
#include <locale>
#include <map>
#include <memory>
#include <new>
#include <numeric>
#include <ostream>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <stdexcept>
#include <streambuf>
#include <string>
#include <typeinfo>
#include <utility>
#include <valarray>
#include <vector>

#if __cplusplus >= 201103L
#include <array>
#include <atomic>
#include <chrono>
#include <condition_variable>
#include <forward_list>
#include <future>
#include <initializer_list>
#include <mutex>
#include <random>
#include <ratio>
#include <regex>
#include <scoped_allocator>
#include <system_error>
#include <thread>
#include <tuple>
#include <typeindex>
#include <type_traits>
#include <unordered_map>
#include <unordered_set>
#endif
//#include <bits/stdc++.h>
using namespace std;
 
#define ll long long
#define pii pair<int,int>
#define pll pair<ll,ll>
#define pil pair<int,ll>
#define pli pair<ll,int>
#define X first
#define Y second
#define GETVECTOR(n) for(int i=0; i< (n); i++) scanf("%d ",&inp[i]);
#define CNT_LOWER(v,n) (int)(lower_bound((v).begin(),(v).end(),(n))-(v).begin())
#define CNT_UPPER(v,n) (int)(upper_bound((v).begin(),(v).end(),(n))-(v).begin())
 
// CNT_LOWER: number of element in v smaller than n
// CNT_UPPER: number of element in v smaller or same than n

#define sz(v) ((int)(v).size())
#define all(v) (v).begin(), (v).end()
using complex_t = complex<double>;

void fft(vector<complex_t>& a) {
	int n = sz(a), L = 31 - __builtin_clz(n);
	static vector<complex<long double>> R(2, 1);
    static vector<complex_t> rt(2, 1); // (^ 10% faster if double)
    for (static int k = 2; k < n; k *= 2) {
        R.resize(n); rt.resize(n);
        auto x = polar(1.0L, acos(-1.0L) / k);
        for (int i=k;i<k+k;i++) rt[i] = R[i] = i&1 ? R[i/2] * x : R[i/2];
    }
    vector<int> rev(n);
    for (int i=0;i<n;i++) rev[i] = (rev[i / 2] | (i & 1) << L) / 2;
    for (int i=0;i<n;i++) if (i < rev[i]) swap(a[i], a[rev[i]]);
    for (int k = 1; k < n; k *= 2){
        for (int i = 0; i < n; i += 2 * k) for (int j=0;j<k;j++) {
            // complex_t z = rt[j+k] * a[i+j+k]; // (25% faster if hand-rolled)Â  /// include-line
            auto x = (double *)&rt[j+k], y = (double *)&a[i+j+k];                /// exclude-line
            complex_t z(x[0]*y[0] - x[1]*y[1], x[0]*y[1] + x[1]*y[0]);           /// exclude-line
            a[i + j + k] = a[i + j] - z;
            a[i + j] += z;
        }
    }
}

template <typename T>vector<T> conv(const vector<T>& a, const vector<T>& b) {
    if (a.empty() || b.empty()) return {};
    vector<T> res(sz(a) + sz(b) - 1);
    int L = 32 - __builtin_clz(sz(res)), n = 1 << L;
    vector<complex_t> in(n), out(n);
    copy(all(a), begin(in));
    for (int i=0;i<sz(b);i++) in[i].imag(b[i]);
    fft(in);
    for (complex_t& x: in) x *= x;
    for (int i=0;i<n;i++) out[i] = in[-i & (n - 1)] - conj(in[i]);
    fft(out);
    for (int i=0;i<sz(res);i++){
        res[i] = static_cast<T>(imag(out[i]) / (4 * n) + (is_integral_v<T> ? (imag(out[i]) > 0 ? 0.5 : -0.5) : 0));
    }
    return res;
}



typedef struct p3{
	int a; int b; int c;
}p3;

bool cmp3(p3 p, p3 q){
	if(p.a==q.a){
		if(p.b == q.b){
			return p.c < q.c;
		}
		return p.b < q.b;
	}
	return p.a < q.a;
}
 
void make_segtree(int node, int start, int end, vector<int> &segtree, vector<int> &arr){
	if(start==end){
		segtree[node] = arr[start];
		return;
	}
	int mid = (start+end)/2;
	make_segtree(node*2, start, mid, segtree, arr);
	make_segtree(node*2+1, mid+1, end, segtree, arr);
	segtree[node] = segtree[node*2] + segtree[node*2 + 1];
	return;
}
 
void update(int node, int start, int end, int x, int val, vector<int> &segtree, vector<int> &arr){
	if(x<start or end<x) return;
	if(start == end){
		segtree[node] = val; return;
	}
	int mid = (start+end)/2;
	update(2*node,start,mid,x,val,segtree,arr);
	update(2*node+1,mid+1,end,x,val,segtree,arr);
	segtree[node] = segtree[node*2] + segtree[node*2+1];
}
 
int query(int node, int start, int end, int l, int r, vector<int> &segtree, vector<int> &arr){
	if(r<start or end<l) return 0;
	if(l<=start and end<=r) return segtree[node];
	int mid = (start+end)/2;
	return query(node*2, start, mid, l, r, segtree, arr) + query(node*2+1, mid+1, end, l, r, segtree, arr);
}
 
class djs
{
    int n;
    vector<int> par;
 
public:
    djs(int n) : n(n) {
        par.resize(n);
        for(int i=0; i<n; i++) par[i] = i;
    }
 
    int find(int v) {
        if(par[v] == v) return v;
        else return par[v] = find(par[v]);
    }
 
    bool Union(int x, int y) {
        int px = find(x);
        int py = find(y);
 
        if(px == py) return false;
 
        par[px] = py;
        return true;
    }
};
// Usage: djs DJS(n)
 
ll poww(ll a,ll x,ll m){
	if(x==1) return a%m;
	if(x==0) return 1;
	ll v = poww(a, x/2, m);
	v = v*v%m;
	if(x%2) v = v*a%m;
	return v;
}
// a^x (mod m)
 
ll modInverse(ll A, ll M){
    ll m0 = M;
    ll y = 0, x = 1;
    if (M == 1)
        return 0;
    while (A > 1) {
        ll q = A / M;
        ll t = M;
        M = A % M, A = t;
        t = y;
        y = x - q * y;
        x = t;
    }
    if (x < 0)
        x += m0;
    return x;
}
 
void BFS(int r, vector<int> &visited, vector<int> &dist, vector<int> &under, vector<vector<pii>> &GRAPH){
	visited[r] = 1;
	int sm = 1;
	for(pii p: GRAPH[r]){
		if(visited[p.first]) continue;
		dist[p.first] = dist[r] + p.second;
		BFS(p.first, visited, dist, under, GRAPH);
		sm += under[p.first];
	}	
}
ll arr6[52][52] = {{2771, 2575, 33644, 2575, 2393, 2393, 31278, 33644, 31265, 31278, 377208, 169, 2392, 2197, 28886, 2393, 2393, 2393, 28912, 31265, 31265, 28899, 348660, 2197, 2210, 2379, 28899, 2575, 2575, 31096, 31278, 28899, 31278, 348816, 28886, 28730, 31265, 33644, 31096, 33644, 31278, 28899, 28912, 31278, 377208, 348660, 375180, 348972, 377208, 348660, 348816, 3857568}, {2575, 2771, 33644, 2393, 2575, 2393, 31265, 31278, 31278, 33644, 377208, 169, 2197, 2392, 28886, 2210, 2379, 2197, 28886, 28899, 28730, 31265, 348660, 2393, 2393, 2393, 31265, 2575, 2575, 33644, 31278, 31278, 31278, 377208, 28912, 31265, 28899, 31096, 33644, 31096, 28899, 31278, 28912, 28899, 348816, 348660, 375180, 348660, 348816, 348972, 377208, 3857568}, {2588, 2588, 33801, 2406, 2406, 2405, 31422, 31434, 31422, 31434, 378948, 157, 2222, 2222, 29200, 2236, 2223, 2223, 29212, 29212, 29043, 29212, 352284, 2223, 2236, 2223, 29212, 2405, 2405, 31422, 29224, 29225, 29224, 352428, 29212, 29043, 29212, 31422, 31422, 31422, 29225, 29225, 29224, 29225, 352428, 352284, 378948, 352428, 352428, 352428, 352428, 3895848}, {2575, 2393, 31278, 2771, 2393, 2575, 33644, 33644, 31278, 31265, 377208, 183, 2393, 2379, 28899, 2575, 2393, 2575, 31096, 31278, 31278, 28899, 348816, 2379, 2210, 2575, 28886, 2393, 2393, 28912, 31265, 28899, 31265, 348660, 28899, 31096, 31265, 31278, 28912, 31278, 33644, 28899, 31096, 33644, 377208, 348660, 348972, 375180, 377208, 348816, 348660, 3857568}, {2393, 2575, 31278, 2393, 2771, 2575, 31278, 31265, 33644, 33644, 377208, 183, 2379, 2393, 28899, 2210, 2575, 2379, 28899, 28886, 31096, 31265, 348660, 2575, 2575, 2393, 31278, 2393, 2393, 31278, 31265, 33644, 31265, 377208, 31096, 31278, 28899, 28912, 31278, 28912, 28899, 33644, 31096, 28899, 348660, 348816, 348972, 348816, 348660, 375180, 377208, 3857568}, {2393, 2393, 31265, 2575, 2575, 2771, 33644, 31278, 33644, 31278, 377208, 183, 2393, 2393, 29068, 2392, 2393, 2575, 31265, 29068, 31278, 29068, 350688, 2575, 2392, 2393, 29068, 2224, 2224, 29068, 29068, 31265, 29068, 350688, 31265, 31278, 29068, 29068, 29068, 29068, 31265, 31265, 33644, 31265, 350688, 350688, 350688, 377208, 350688, 377208, 350688, 3878160}, {2406, 2405, 31422, 2588, 2406, 2588, 33801, 31434, 31434, 31422, 378948, 170, 2224, 2405, 29212, 2405, 2224, 2392, 31422, 29224, 29068, 29212, 352428, 2406, 2236, 2405, 29200, 2236, 2236, 29212, 29212, 29224, 29212, 352284, 29224, 31422, 29212, 29225, 29212, 29225, 31422, 29224, 31434, 31422, 352428, 352284, 352428, 378948, 352428, 352560, 352284, 3895848}, {2588, 2406, 31434, 2588, 2405, 2406, 31434, 33801, 31422, 31422, 378948, 170, 2405, 2210, 29043, 2406, 2405, 2406, 29068, 31422, 31422, 29043, 350400, 2210, 2222, 2392, 29043, 2406, 2406, 29068, 31422, 29043, 31422, 350400, 29043, 28886, 31422, 31434, 29068, 31434, 31434, 29043, 29068, 31434, 378948, 350400, 350688, 350688, 378948, 350400, 350400, 3875124}, {2405, 2406, 31422, 2406, 2588, 2588, 31434, 31422, 33801, 31434, 378948, 170, 2405, 2224, 29212, 2236, 2405, 2406, 29224, 29200, 31422, 29212, 352284, 2392, 2405, 2224, 29224, 2236, 2236, 29225, 29212, 31422, 29212, 352428, 31422, 29068, 29212, 29212, 29225, 29212, 29224, 31422, 31434, 29224, 352284, 352428, 352428, 352560, 352284, 378948, 352428, 3895848}, {2406, 2588, 31434, 2405, 2588, 2406, 31422, 31422, 31434, 33801, 378948, 170, 2210, 2405, 29043, 2222, 2392, 2210, 29043, 29043, 28886, 31422, 350400, 2406, 2406, 2405, 31422, 2406, 2406, 31434, 31422, 31434, 31422, 378948, 29068, 31422, 29043, 29068, 31434, 29068, 29043, 31434, 29068, 29043, 350400, 350400, 350688, 350400, 350400, 350688, 378948, 3875124}, {2418, 2418, 31579, 2418, 2418, 2418, 31579, 31579, 31579, 31579, 380699, 158, 2235, 2235, 29357, 2248, 2235, 2236, 29369, 29357, 29200, 29357, 354035, 2236, 2248, 2235, 29357, 2248, 2248, 29369, 29357, 29369, 29357, 354035, 29369, 29200, 29357, 29369, 29369, 29369, 29369, 29369, 29380, 29369, 354035, 354035, 354168, 354168, 354035, 354168, 354035, 3913646}, {2366, 2366, 28574, 2562, 2562, 2562, 30940, 30940, 30940, 30940, 345072, 211, 2758, 2758, 33488, 2562, 2758, 2758, 33488, 30940, 33306, 33488, 373464, 2758, 2562, 2758, 30940, 2184, 2562, 28574, 28574, 30940, 33488, 345072, 33488, 33306, 33488, 28574, 30940, 30940, 30940, 33488, 33488, 33488, 373464, 373464, 345072, 373464, 345072, 373464, 373464, 3819816}, {2392, 2197, 28886, 2393, 2379, 2393, 28912, 31265, 31265, 28730, 348660, 197, 2771, 2576, 33644, 2393, 2575, 2575, 31278, 31265, 33644, 31278, 377208, 2576, 2575, 2576, 31096, 2210, 2393, 28899, 28899, 31278, 31278, 348816, 33644, 31122, 33644, 28886, 28912, 31265, 28912, 31278, 31278, 31278, 377208, 375180, 348660, 348972, 348660, 377208, 348972, 3857568}, {2197, 2392, 28886, 2379, 2393, 2393, 31265, 28730, 28912, 31265, 348660, 197, 2576, 2771, 33644, 2575, 2576, 2576, 33644, 31096, 31122, 33644, 375180, 2575, 2393, 2575, 31265, 2210, 2393, 28886, 28899, 28912, 31278, 348660, 31278, 33644, 31278, 28899, 31265, 28912, 31278, 31278, 31278, 31278, 348972, 377208, 348660, 377208, 348816, 348972, 377208, 3857568}, {2222, 2222, 29200, 2223, 2223, 2236, 29212, 29043, 29212, 29043, 352284, 184, 2588, 2588, 33801, 2405, 2406, 2406, 31422, 31422, 31434, 31422, 378948, 2406, 2405, 2406, 31422, 2236, 2236, 29212, 29225, 29224, 29225, 352428, 31422, 31434, 31422, 29212, 29212, 29212, 29224, 29225, 29225, 29225, 352428, 378948, 352284, 352428, 352428, 352428, 352428, 3895848}, {2393, 2210, 29068, 2575, 2210, 2392, 31265, 31278, 29068, 28886, 350688, 183, 2393, 2575, 31265, 2771, 2393, 2575, 33644, 33644, 31278, 31265, 377208, 2393, 2224, 2393, 29068, 2392, 2224, 29068, 31265, 29068, 29068, 350688, 29068, 31278, 29068, 31265, 29068, 29068, 33644, 29068, 31265, 31265, 350688, 350688, 350688, 377208, 377208, 350688, 350688, 3878160}, {2393, 2379, 28899, 2393, 2575, 2393, 28912, 31265, 31265, 31096, 348660, 197, 2575, 2576, 31278, 2393, 2771, 2575, 31278, 31265, 33644, 33644, 377208, 2576, 2393, 2576, 28912, 2210, 2575, 28899, 28886, 31265, 33644, 348660, 31278, 31122, 31278, 28899, 31096, 31278, 28912, 33644, 31278, 31278, 377208, 348972, 348816, 348972, 348660, 377208, 375180, 3857568}, {2393, 2197, 28899, 2575, 2379, 2575, 31096, 31278, 31278, 28730, 348816, 197, 2575, 2576, 31278, 2575, 2575, 2771, 33644, 31278, 33644, 31278, 377208, 2576, 2393, 2576, 28912, 2210, 2393, 28886, 28899, 31265, 31278, 348660, 31278, 31122, 31278, 28899, 28912, 31265, 31096, 31278, 33644, 33644, 377208, 348972, 348660, 375180, 348816, 377208, 348972, 3857568}, {2224, 2222, 29212, 2392, 2223, 2405, 31422, 29068, 29224, 29043, 352428, 184, 2406, 2588, 31422, 2588, 2406, 2588, 33801, 31434, 31434, 31422, 378948, 2406, 2236, 2406, 29212, 2236, 2236, 29200, 29224, 29212, 29225, 352284, 29225, 31434, 29225, 29224, 29212, 29212, 31434, 29225, 31422, 31422, 352428, 352428, 352284, 378948, 352560, 352428, 352428, 3895848}, {2405, 2223, 29212, 2406, 2222, 2236, 29224, 31422, 29200, 29043, 352284, 170, 2405, 2392, 31422, 2588, 2405, 2406, 31434, 33801, 31422, 31422, 378948, 2224, 2236, 2224, 29225, 2405, 2236, 29224, 31422, 29212, 29212, 352428, 29212, 29068, 29212, 31422, 29225, 29212, 31434, 29212, 29224, 29224, 352284, 352428, 352428, 352560, 378948, 352284, 352428, 3895848}, {2405, 2210, 29043, 2406, 2392, 2406, 29068, 31422, 31422, 28886, 350400, 183, 2588, 2394, 31434, 2406, 2588, 2588, 31434, 31422, 33801, 31434, 378948, 2394, 2406, 2394, 29068, 2222, 2406, 29043, 29043, 31422, 31434, 350400, 31434, 28938, 31434, 29043, 29068, 31422, 29068, 31434, 31434, 31434, 378948, 350688, 350400, 350688, 350400, 378948, 350688, 3875124}, {2223, 2405, 29212, 2223, 2405, 2236, 29212, 29043, 29212, 31422, 352284, 184, 2406, 2588, 31422, 2405, 2588, 2406, 31422, 31422, 31434, 33801, 378948, 2406, 2236, 2406, 29212, 2236, 2405, 29212, 29212, 29212, 31422, 352284, 29225, 31434, 29225, 29225, 31422, 29224, 29224, 31422, 29225, 29225, 352428, 352428, 352428, 352428, 352428, 352428, 378948, 3895848}, {2235, 2235, 29357, 2236, 2235, 2248, 29369, 29200, 29357, 29200, 354035, 171, 2418, 2405, 31579, 2418, 2418, 2418, 31579, 31579, 31579, 31579, 380699, 2237, 2248, 2237, 29369, 2248, 2248, 29357, 29369, 29357, 29369, 354035, 29369, 29224, 29369, 29369, 29369, 29357, 29380, 29369, 29369, 29369, 354035, 354168, 354035, 354168, 354168, 354035, 354168, 3913646}, {2197, 2393, 28899, 2379, 2575, 2575, 31278, 28730, 31096, 31278, 348816, 197, 2576, 2575, 31278, 2393, 2576, 2576, 31278, 28912, 31122, 31278, 348972, 2771, 2575, 2575, 31278, 2210, 2393, 28899, 28899, 31096, 31278, 348816, 33644, 33644, 31278, 28886, 31265, 28912, 31265, 33644, 33644, 31278, 348972, 377208, 348660, 377208, 348660, 375180, 377208, 3857568}, {2210, 2393, 29068, 2210, 2575, 2392, 29068, 28886, 31265, 31278, 350688, 183, 2575, 2393, 31265, 2224, 2393, 2393, 29068, 29068, 31278, 29068, 350688, 2575, 2771, 2393, 33644, 2392, 2224, 31265, 31265, 33644, 29068, 377208, 33644, 31278, 31265, 29068, 29068, 29068, 29068, 31265, 31265, 29068, 350688, 377208, 350688, 350688, 350688, 377208, 350688, 3878160}, {2379, 2393, 28899, 2575, 2393, 2393, 31265, 31096, 28912, 31265, 348660, 197, 2576, 2575, 31278, 2393, 2576, 2576, 31278, 28912, 31122, 31278, 348972, 2575, 2393, 2771, 31265, 2210, 2575, 28899, 28886, 28912, 33644, 348660, 31278, 33644, 33644, 28899, 31278, 31096, 31265, 31278, 31278, 33644, 375180, 377208, 348816, 377208, 348660, 348972, 377208, 3857568}, {2223, 2405, 29212, 2222, 2406, 2236, 29200, 29043, 29224, 31422, 352284, 170, 2392, 2405, 31422, 2236, 2224, 2224, 29212, 29225, 29068, 29212, 352428, 2406, 2588, 2405, 33801, 2405, 2236, 31422, 31422, 31434, 29212, 378948, 31434, 31422, 31422, 29224, 29212, 29225, 29212, 29224, 29224, 29212, 352428, 378948, 352428, 352284, 352428, 352560, 352284, 3895848}, {2575, 2575, 31265, 2393, 2393, 2224, 29068, 31278, 29068, 31278, 350688, 156, 2210, 2210, 29068, 2392, 2210, 2210, 29068, 31265, 28886, 29068, 350688, 2210, 2392, 2210, 31265, 2771, 2392, 33644, 33644, 31265, 29068, 377208, 29068, 28886, 29068, 33644, 31265, 31265, 31265, 29068, 29068, 29068, 350688, 350688, 377208, 350688, 377208, 350688, 350688, 3878160}, {2575, 2575, 31265, 2393, 2393, 2224, 29068, 31278, 29068, 31278, 350688, 183, 2393, 2393, 29068, 2224, 2575, 2393, 29068, 29068, 31278, 31265, 350688, 2393, 2224, 2575, 29068, 2392, 2771, 31265, 29068, 29068, 33644, 350688, 29068, 31278, 31265, 31265, 33644, 33644, 29068, 31265, 29068, 31265, 377208, 350688, 377208, 350688, 350688, 350688, 377208, 3878160}, {2392, 2588, 31422, 2224, 2406, 2236, 29212, 29068, 29225, 31434, 352428, 157, 2223, 2222, 29212, 2236, 2223, 2222, 29200, 29224, 29043, 29212, 352284, 2223, 2405, 2223, 31422, 2588, 2405, 33801, 31434, 31422, 29224, 378948, 29224, 29043, 29225, 31434, 31422, 31422, 29224, 29225, 29212, 29212, 352428, 352428, 378948, 352284, 352560, 352428, 352428, 3895848}, {2406, 2406, 29224, 2405, 2405, 2236, 29212, 31422, 29212, 31422, 352284, 157, 2223, 2223, 29225, 2405, 2222, 2223, 29224, 31422, 29043, 29212, 352428, 2223, 2405, 2222, 31422, 2588, 2236, 31434, 33801, 31422, 29200, 378948, 29224, 29043, 29212, 31434, 29224, 29224, 31422, 29212, 29225, 29212, 352284, 352428, 352560, 352428, 378948, 352428, 352284, 3895848}, {2223, 2406, 29225, 2223, 2588, 2405, 29224, 29043, 31422, 31434, 352428, 170, 2406, 2224, 29224, 2236, 2405, 2405, 29212, 29212, 31422, 29212, 352284, 2392, 2588, 2224, 31434, 2405, 2236, 31422, 31422, 33801, 29212, 378948, 31434, 29068, 29224, 29224, 29225, 29212, 29225, 31422, 31422, 29212, 352284, 352560, 352428, 352428, 352428, 378948, 352428, 3895848}, {2406, 2406, 29224, 2405, 2405, 2236, 29212, 31422, 29212, 31422, 352284, 184, 2406, 2406, 29225, 2236, 2588, 2406, 29225, 29212, 31434, 31422, 352428, 2406, 2236, 2588, 29212, 2236, 2588, 29224, 29200, 29212, 33801, 352284, 29225, 31434, 31422, 29224, 31434, 31434, 29212, 31422, 29225, 31422, 378948, 352428, 352560, 352428, 352284, 352428, 378948, 3895848}, {2236, 2418, 29369, 2235, 2418, 2248, 29357, 29200, 29369, 31579, 354035, 158, 2236, 2235, 29369, 2248, 2235, 2235, 29357, 29369, 29200, 29357, 354035, 2236, 2418, 2235, 31579, 2418, 2248, 31579, 31579, 31579, 29357, 380699, 29380, 29200, 29369, 29380, 29369, 29369, 29369, 29369, 29369, 29357, 354035, 354168, 354168, 354035, 354168, 354168, 354035, 3913646}, {2222, 2224, 29212, 2223, 2392, 2405, 29224, 29043, 31422, 29068, 352428, 184, 2588, 2406, 31422, 2236, 2406, 2406, 29225, 29212, 31434, 29225, 352428, 2588, 2588, 2406, 31434, 2236, 2236, 29224, 29224, 31434, 29225, 352560, 33801, 31434, 31422, 29200, 29212, 29212, 29212, 31422, 31422, 29225, 352428, 378948, 352284, 352428, 352284, 378948, 352428, 3895848}, {2210, 2405, 29043, 2392, 2406, 2406, 31422, 28886, 29068, 31422, 350400, 183, 2394, 2588, 31434, 2406, 2394, 2394, 31434, 29068, 28938, 31434, 350688, 2588, 2406, 2588, 31422, 2222, 2406, 29043, 29043, 29068, 31434, 350400, 31434, 33801, 31434, 29043, 31422, 29068, 31422, 31434, 31434, 31434, 350688, 378948, 350400, 378948, 350400, 350688, 378948, 3875124}, {2405, 2223, 29212, 2405, 2223, 2236, 29212, 31422, 29212, 29043, 352284, 184, 2588, 2406, 31422, 2236, 2406, 2406, 29225, 29212, 31434, 29225, 352428, 2406, 2405, 2588, 31422, 2236, 2405, 29225, 29212, 29224, 31422, 352428, 31422, 31434, 33801, 29212, 29224, 31422, 29212, 29225, 29225, 31422, 378948, 378948, 352428, 352428, 352284, 352428, 352428, 3895848}, {2588, 2392, 31422, 2406, 2224, 2236, 29225, 31434, 29212, 29068, 352428, 157, 2222, 2223, 29212, 2405, 2223, 2223, 29224, 31422, 29043, 29225, 352428, 2222, 2236, 2223, 29224, 2588, 2405, 31434, 31434, 29224, 29224, 352560, 29200, 29043, 29212, 33801, 31422, 31422, 31422, 29212, 29212, 29225, 352428, 352284, 378948, 352428, 378948, 352284, 352428, 3895848}, {2392, 2588, 31422, 2224, 2406, 2236, 29212, 29068, 29225, 31434, 352428, 170, 2224, 2405, 29212, 2236, 2392, 2224, 29212, 29225, 29068, 31422, 352428, 2405, 2236, 2406, 29212, 2405, 2588, 31422, 29224, 29225, 31434, 352428, 29212, 31422, 29224, 31422, 33801, 31434, 29212, 31422, 29212, 29224, 352560, 352284, 378948, 352284, 352428, 352428, 378948, 3895848}, {2588, 2392, 31422, 2406, 2224, 2236, 29225, 31434, 29212, 29068, 352428, 170, 2405, 2224, 29212, 2236, 2406, 2405, 29212, 29212, 31422, 29224, 352284, 2224, 2236, 2392, 29225, 2405, 2588, 31422, 29224, 29212, 31434, 352428, 29212, 29068, 31422, 31422, 31434, 33801, 29225, 29224, 29212, 31422, 378948, 352428, 378948, 352428, 352428, 352284, 352560, 3895848}, {2406, 2223, 29225, 2588, 2223, 2405, 31422, 31434, 29224, 29043, 352428, 170, 2224, 2406, 29224, 2588, 2224, 2392, 31434, 31434, 29068, 29224, 352560, 2405, 2236, 2405, 29212, 2405, 2236, 29224, 31422, 29225, 29212, 352428, 29212, 31422, 29212, 31422, 29212, 29225, 33801, 29212, 31422, 31422, 352428, 352284, 352428, 378948, 378948, 352428, 352284, 3895848}, {2223, 2406, 29225, 2223, 2588, 2405, 29224, 29043, 31422, 31434, 352428, 184, 2406, 2406, 29225, 2236, 2588, 2406, 29225, 29212, 31434, 31422, 352428, 2588, 2405, 2406, 29224, 2236, 2405, 29225, 29212, 31422, 31422, 352428, 31422, 31434, 29225, 29212, 31422, 29224, 29212, 33801, 31422, 29225, 352428, 352428, 352428, 352428, 352284, 378948, 378948, 3895848}, {2224, 2224, 29224, 2392, 2392, 2588, 31434, 29068, 31434, 29068, 352560, 184, 2406, 2406, 29225, 2405, 2406, 2588, 31422, 29224, 31434, 29225, 352428, 2588, 2405, 2406, 29224, 2236, 2236, 29212, 29225, 31422, 29225, 352428, 31422, 31434, 29225, 29212, 29212, 29212, 31422, 31422, 33801, 31422, 352428, 352428, 352284, 378948, 352428, 378948, 352428, 3895848}, {2406, 2223, 29225, 2588, 2223, 2405, 31422, 31434, 29224, 29043, 352428, 184, 2406, 2406, 29225, 2405, 2406, 2588, 31422, 29224, 31434, 29225, 352428, 2406, 2236, 2588, 29212, 2236, 2405, 29212, 29212, 29212, 31422, 352284, 29225, 31434, 31422, 29225, 29224, 31422, 31422, 29225, 31422, 33801, 378948, 352428, 352428, 378948, 352428, 352428, 352428, 3895848}, {2418, 2236, 29369, 2418, 2235, 2248, 29369, 31579, 29357, 29200, 354035, 171, 2418, 2237, 29369, 2248, 2418, 2418, 29369, 29357, 31579, 29369, 354035, 2237, 2248, 2405, 29369, 2248, 2418, 29369, 29357, 29357, 31579, 354035, 29369, 29224, 31579, 29369, 29380, 31579, 29369, 29369, 29369, 31579, 380699, 354168, 354168, 354168, 354035, 354035, 354168, 3913646}, {2235, 2235, 29357, 2235, 2236, 2248, 29357, 29200, 29369, 29200, 354035, 171, 2405, 2418, 31579, 2248, 2237, 2237, 29369, 29369, 29224, 29369, 354168, 2418, 2418, 2418, 31579, 2248, 2248, 29369, 29369, 29380, 29369, 354168, 31579, 31579, 31579, 29357, 29357, 29369, 29357, 29369, 29369, 29369, 354168, 380699, 354035, 354035, 354035, 354168, 354035, 3913646}, {2405, 2405, 31579, 2237, 2237, 2248, 29369, 29224, 29369, 29224, 354168, 158, 2235, 2235, 29357, 2248, 2236, 2235, 29357, 29369, 29200, 29369, 354035, 2235, 2248, 2236, 29369, 2418, 2418, 31579, 29380, 29369, 29380, 354168, 29357, 29200, 29369, 31579, 31579, 31579, 29369, 29369, 29357, 29369, 354168, 354035, 380699, 354035, 354168, 354035, 354168, 3913646}, {2237, 2235, 29369, 2405, 2236, 2418, 31579, 29224, 29380, 29200, 354168, 171, 2237, 2418, 29369, 2418, 2237, 2405, 31579, 29380, 29224, 29369, 354168, 2418, 2248, 2418, 29357, 2248, 2248, 29357, 29369, 29369, 29369, 354035, 29369, 31579, 29369, 29369, 29357, 29369, 31579, 29369, 31579, 31579, 354168, 354035, 354035, 380699, 354168, 354168, 354035, 3913646}, {2418, 2236, 29369, 2418, 2235, 2248, 29369, 31579, 29357, 29200, 354035, 158, 2235, 2236, 29369, 2418, 2235, 2236, 29380, 31579, 29200, 29369, 354168, 2235, 2248, 2235, 29369, 2418, 2248, 29380, 31579, 29369, 29357, 354168, 29357, 29200, 29357, 31579, 29369, 29369, 31579, 29357, 29369, 29369, 354035, 354035, 354168, 354168, 380699, 354035, 354035, 3913646}, {2235, 2237, 29369, 2236, 2405, 2418, 29380, 29200, 31579, 29224, 354168, 171, 2418, 2237, 29369, 2248, 2418, 2418, 29369, 29357, 31579, 29369, 354035, 2405, 2418, 2237, 29380, 2248, 2248, 29369, 29369, 31579, 29369, 354168, 31579, 29224, 29369, 29357, 29369, 29357, 29369, 31579, 31579, 29369, 354035, 354168, 354035, 354168, 354035, 380699, 354168, 3913646}, {2236, 2418, 29369, 2235, 2418, 2248, 29357, 29200, 29369, 31579, 354035, 171, 2237, 2418, 29369, 2248, 2405, 2237, 29369, 29369, 29224, 31579, 354168, 2418, 2248, 2418, 29357, 2248, 2418, 29369, 29357, 29369, 31579, 354035, 29369, 31579, 29369, 29369, 31579, 29380, 29357, 31579, 29369, 29369, 354168, 354035, 354168, 354035, 354035, 354168, 380699, 3913646}, {2248, 2248, 29514, 2248, 2248, 2260, 29514, 29357, 29514, 29357, 355786, 159, 2248, 2248, 29514, 2260, 2248, 2248, 29514, 29514, 29357, 29514, 355786, 2248, 2260, 2248, 29514, 2260, 2260, 29514, 29514, 29514, 29514, 355786, 29514, 29357, 29514, 29514, 29514, 29514, 29514, 29514, 29514, 29514, 355786, 355786, 355786, 355786, 355786, 355786, 355786, 3931555}};

ll arr5[15][15] = {{211, 2758, 2758, 33488, 2366, 2562, 30940, 2562, 2758, 2758, 33488, 30940, 33306, 33488, 373464}, {197, 2771, 2576, 33644, 2392, 2393, 31265, 2393, 2575, 2575, 31278, 31265, 33644, 31278, 377208}, {197, 2576, 2771, 33644, 2379, 2575, 31096, 2575, 2576, 2576, 33644, 31096, 31122, 33644, 375180}, {184, 2588, 2588, 33801, 2405, 2405, 31422, 2405, 2406, 2406, 31422, 31422, 31434, 31422, 378948}, {169, 2392, 2379, 31265, 2771, 2575, 33644, 2575, 2393, 2393, 31278, 33644, 31265, 31278, 377208}, {183, 2393, 2575, 31265, 2575, 2771, 33644, 2393, 2575, 2393, 31265, 31278, 31278, 33644, 377208}, {170, 2405, 2392, 31422, 2588, 2588, 33801, 2406, 2406, 2405, 31422, 31434, 31422, 31434, 378948}, {183, 2393, 2575, 31265, 2575, 2393, 31278, 2771, 2393, 2575, 33644, 33644, 31278, 31265, 377208}, {197, 2575, 2576, 31278, 2393, 2575, 31278, 2393, 2771, 2575, 31278, 31265, 33644, 33644, 377208}, {197, 2575, 2576, 31278, 2393, 2393, 31265, 2575, 2575, 2771, 33644, 31278, 33644, 31278, 377208}, {184, 2406, 2588, 31422, 2406, 2405, 31422, 2588, 2406, 2588, 33801, 31434, 31434, 31422, 378948}, {170, 2405, 2392, 31422, 2588, 2406, 31434, 2588, 2405, 2406, 31434, 33801, 31422, 31422, 378948}, {183, 2588, 2394, 31434, 2405, 2406, 31422, 2406, 2588, 2588, 31434, 31422, 33801, 31434, 378948}, {184, 2406, 2588, 31422, 2406, 2588, 31434, 2405, 2588, 2406, 31422, 31422, 31434, 33801, 378948}, {171, 2418, 2405, 31579, 2418, 2418, 31579, 2418, 2418, 2418, 31579, 31579, 31579, 31579, 380699}};

ll arr4[5][5] = {{2771, 183, 2575, 2575, 33644}, {2562, 211, 2758, 2758, 33488}, {2575, 197, 2771, 2576, 33644}, {2575, 197, 2576, 2771, 33644}, {2588, 184, 2588, 2588, 33801}};

ll arr3[2][2] = {{211, 2758}, {197, 2771}};

ll arr2[1][1] = {{211}};

#define MOD 1000000007ll

vector<vector<ll>> MT_mul(vector<vector<ll>>& M1, vector<vector<ll>>& M2){
    int n = M1.size();
    vector<vector<ll>> v(n, vector<ll>(n, 0));
    for(int i=0; i<n; i++){
        for(int j=0; j<n; j++){
            for(int k=0; k<n; k++){
                v[i][j] += M1[i][k]*M2[k][j];
                v[i][j] %= MOD;
            }
        }
    }
    return v;
}

vector<vector<ll>> MT_pow(vector<vector<ll>>& M1, ll e){
    ll n = M1.size();
    vector<vector<ll>> ans(n, vector<ll>(n, 0)), zzm(n, vector<ll>(n, 0));
    for(int i=0; i<n; i++) ans[i][i] = 1;
    for(int i=0; i<n; i++) zzm[i][i] = 1;
    zzm = MT_mul(M1, zzm);
    while(e){
        if(e&1) ans = MT_mul(zzm, ans);
        e /= 2;
        zzm = MT_mul(zzm, zzm);
    }
    return ans;
}



int main(){
    ios::sync_with_stdio(false);
    cin.tie(nullptr); cout.tie(nullptr);
    vector<vector<vector<ll>>> MTRIX(7);
    int sz = 1;
    MTRIX[2] = vector<vector<ll>>(sz, vector<ll>(sz, 0));
    sz = 2;
    MTRIX[3] = vector<vector<ll>>(sz, vector<ll>(sz, 0));
    sz = 5;
    MTRIX[4] = vector<vector<ll>>(sz, vector<ll>(sz, 0));
    sz = 15;
    MTRIX[5] = vector<vector<ll>>(sz, vector<ll>(sz, 0));
    sz = 52;
    MTRIX[6] = vector<vector<ll>>(sz, vector<ll>(sz, 0));

    sz = 1;
    for(int i=0; i<sz; i++){
        for(int j=0; j<sz; j++) MTRIX[2][i][j] = arr2[j][i];
    }
    sz = 2;
    for(int i=0; i<sz; i++){
        for(int j=0; j<sz; j++) MTRIX[3][i][j] = arr3[j][i];
    }
    sz = 5;
    for(int i=0; i<sz; i++){
        for(int j=0; j<sz; j++) MTRIX[4][i][j] = arr4[j][i];
    }
    sz = 15;
    for(int i=0; i<sz; i++){
        for(int j=0; j<sz; j++) MTRIX[5][i][j] = arr5[j][i];
    }
    sz = 52;
    for(int i=0; i<sz; i++){
        for(int j=0; j<sz; j++) MTRIX[6][i][j] = arr6[j][i];
    }
    

    vector<vector<ll>> FI(7);
    for(int MM=2; MM<=6; MM++){
        int T = 1;
        for(int j=0; j<MM; j++) T *= MM;
        for(int i=0; i<T; i++){
            vector<int> arr(MM);
            int i1 = i;
            for(int j=0; j<MM; j++){
                arr[j] = i1 % MM;
                i1 /= MM;
            }
            int truth = 1;
            for(int j=0; j<MM-1; j++){
                if(arr[j] == arr[j+1]) truth = 0;
            }
            if(!truth) continue;
            vector<int> check(MM, 0);
            int end = 0;
            for(int j=0; j<MM; j++){
                if(check[arr[j]]) continue;
                if(arr[j] == end){
                    check[arr[j]] = 1;
                    end++;
                }
                else{
                    truth = 0; break;
                }
            }
            if(truth){
                ll x = 1;
                for(int i1=0; i1<end; i1++) x *= 16-i1;
                FI[MM].push_back(x);
                if(MM==4) cout << x << " ";
            }
        }
    }
    
    int qq; cin >> qq;

    while(qq--){
        int h, w; cin >> h >> w;
        if(h>w){
            h ^= w; w ^= h; h ^= w;
        }
        if(h == 1){
            ll ans = 16 * poww(15, w-1, MOD) % MOD;
            cout << ans << "\n";
        }
        else{
            vector<vector<ll>> M1 = MT_pow(MTRIX[h], w-1);
            ll ans = 0;
            int sz = MTRIX[h].size();
            for(int i=0; i<sz; i++){
                for(int j=0; j<sz; j++){
                    ans += M1[i][j]*FI[h][j];
                    ans %= MOD;
                }
            }
            cout << ans << "\n";
        }
    }
    return 0;
}